const e = require('express');
const db = require('../index');


exports.getAllEvents = (req, res) => {
    db.query('SELECT * FROM Evenement', (err, results) => {
        if (err) {
        return res.status(500).json({ error: 'Erreur MySQL' });
        }
        res.json(results);
    });
}

const fs = require('fs');
const path = require('path');

function getMapPoints(filePath) {
  const rawData = fs.readFileSync(filePath, 'utf-8');
  const lines = rawData.trim().split('\n');

  const points = lines.map(line => {
    const [xStr, yStr, rawName] = line.split(';');
    return {
      x: parseInt(xStr, 10),
      y: parseInt(yStr, 10),
      name: rawName.replace(/@/g, ' ')
    };
  });

  return points;
}

function parseGraph(filePath) {
  const fullPath = path.join(__dirname, '..', filePath);
  const data = fs.readFileSync(fullPath, 'utf-8');
  const lines = data.split('\n').filter(line => line.trim() !== '');
  const nodes = [];
  const edges = [];

  for (const line of lines) {
    const parts = line.split(';').map(p => p.trim());
    if (line.startsWith('V')) {
      const id = parts[0].split(' ')[1];
      const name = parts.slice(2, parts.length-5).join(' ');
      const lineNumber = parts[parts.length-4];
      const terminus = parts[parts.length-2] === 'True';
      const branch = parseInt(parts[parts.length-1]);
      nodes.push({ id, name, line: lineNumber, terminus, branch });
    } else if (line.startsWith('E')) {
      const parts = line.split(';');
      edges.push({
        from: parts[1],
        to: parts[2],
        time: parseInt(parts[3])
      });
    }
  }
  return { nodes, edges };
}



// Parse le fichier des positions
function parsePointPositions(filePath) {
  const content = fs.readFileSync(filePath, 'utf-8');
  const lines = content.split('\n');

  const map = new Map();

  for (const line of lines) {
    const [x, y, rawName] = line.split(';');
    if (!x || !y || !rawName) continue;

    const name = rawName.replace(/@/g, ' ').trim();
    map.set(name, { x: parseInt(x, 10), y: parseInt(y, 10) });
  }

  return map;
}

function getLinks(edges, nodeMap) {
  return edges
    .filter(edge => nodeMap[edge.from] && nodeMap[edge.to])
    .map(edge => ({
      from: { id: edge.from, ...nodeMap[edge.from] },
      to: { id: edge.to, ...nodeMap[edge.to] },
      time: edge.time
    }));
}

function computeShortestPath(from, to, links) {
    // Création de la liste des noeuds uniques
    const nodes = {};
    links.forEach(link => {
        nodes[link.from.id] = link.from;
        nodes[link.to.id] = link.to;
    });

    // Création du graphe sous forme d'adjacence
    const graph = {};
    Object.values(nodes).forEach(node => {
        graph[node.id] = [];
    });
    links.forEach(link => {
        graph[link.from.id].push({ id: link.to.id, time: link.time, edge: link });
        graph[link.to.id].push({ id: link.from.id, time: link.time, edge: link }); // non orienté
    });

    // Initialisation des distances, précédents et file
    const distances = {};
    const previous = {};
    const visited = new Set();
    Object.keys(nodes).forEach(id => {
        distances[id] = Infinity;
        previous[id] = null;
    });
    distances[from.id] = 0;

    const queue = [from.id];

    while (queue.length > 0) {
        // Trouver le noeud avec la plus petite distance
        let minNode = queue.reduce((a, b) =>
            distances[a] < distances[b] ? a : b
        );

        queue.splice(queue.indexOf(minNode), 1);
        visited.add(minNode);

        if (minNode === to.id) break;

        graph[minNode].forEach(neighbor => {
            if (visited.has(neighbor.id)) return;
            const alt = distances[minNode] + neighbor.time;
            if (alt < distances[neighbor.id]) {
                distances[neighbor.id] = alt;
                previous[neighbor.id] = {
                    id: minNode,
                    edge: neighbor.edge
                };
                if (!queue.includes(neighbor.id)) {
                    queue.push(neighbor.id);
                }
            }
        });
    }
    console.log('Précédents:', previous);

    // Reconstruire le chemin sous forme de liste de liens
    const path = [];
    let current = to.id;
    while (previous[current]) {
        path.unshift(previous[current].edge);
        current = previous[current].id;
    }
    console.log('Chemin trouvé:', path);
    return path; // tableau de liens (edges)
}




module.exports = {
  getMapPoints,
  getLinks,
  parseGraph,
  parsePointPositions,
  computeShortestPath
};