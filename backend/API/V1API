const e = require('express');
const db = require('../index');


exports.getAllEvents = (req, res) => {
    db.query('SELECT * FROM Evenement', (err, results) => {
        if (err) {
        return res.status(500).json({ error: 'Erreur MySQL' });
        }
        res.json(results);
    });
}

const fs = require('fs');
const path = require('path');

function getMapPoints(filePath) {
  const rawData = fs.readFileSync(filePath, 'utf-8');
  const lines = rawData.trim().split('\n');

  const points = lines.map(line => {
    const [xStr, yStr, rawName] = line.split(';');
    return {
      x: parseInt(xStr, 10),
      y: parseInt(yStr, 10),
      name: rawName.replace(/@/g, ' ')
    };
  });

  return points;
}

function parseGraph(filePath) {
  const fullPath = path.join(__dirname, '..', filePath);
  const data = fs.readFileSync(fullPath, 'utf-8');
  const lines = data.split('\n').filter(line => line.trim() !== '');
  console.log('Parsing graph data from:', lines);
  const nodes = [];
  const edges = [];

  for (const line of lines) {
    const parts = line.split(';').map(p => p.trim());
    if (line.startsWith('V')) {
      const id = parts[0].split(' ')[1];
      const name = parts.slice(2, parts.length-5).join(' ');
      const lineNumber = parts[parts.length-4];
      const terminus = parts[parts.length-2] === 'True';
      const branch = parseInt(parts[parts.length-1]);
      console.log(`Node ID: ${id}, Name: ${name}, Line: ${lineNumber}, Terminus: ${terminus}, Branch: ${branch}`);
      nodes.push({ id, name, line: lineNumber, terminus, branch });
    } else if (line.startsWith('E')) {
      const parts = line.split(';');
      edges.push({
        from: parts[1],
        to: parts[2],
        time: parseInt(parts[3])
      });
    }
  }
  console.log(edges);
  return { nodes, edges };
}



// Parse le fichier des positions
function parsePointPositions(filePath) {
  const content = fs.readFileSync(filePath, 'utf-8');
  const lines = content.split('\n');

  const map = new Map();

  for (const line of lines) {
    const [x, y, rawName] = line.split(';');
    if (!x || !y || !rawName) continue;

    const name = rawName.replace(/@/g, ' ').trim();
    map.set(name, { x: parseInt(x, 10), y: parseInt(y, 10) });
  }

  return map;
}

function getLinks(edges, nodeMap) {
  return edges
    .filter(edge => nodeMap[edge.from] && nodeMap[edge.to])
    .map(edge => ({
      from: { id: edge.from, ...nodeMap[edge.from] },
      to: { id: edge.to, ...nodeMap[edge.to] },
      time: edge.time
    }));
}


module.exports = {
  getMapPoints,
  getLinks,
  parseGraph,
  parsePointPositions
};